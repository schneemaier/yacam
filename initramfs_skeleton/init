#!/bin/sh
# devtmpfs does not get automounted for initramfs
/bin/mount -t devtmpfs devtmpfs /dev

# Setup this program to get input from /dev/console, and output to /dev/console
# file descriptor #0: standard input stream, or stdin for short.
# file descriptor #1: standard output stream, or stdout for short.
# file descriptor #2: standard error output stream, or stderr for short.
exec 0</dev/console
exec 1>/dev/console
exec 2>/dev/console


read -n 1 -s -r -t 2 -p "Press any key to interrupt init" 

if [ $? -eq 0 ]
then
  echo "Dropping to a shell"
  exec /bin/sh
fi


echo "Starting root overlay setp"

mount -t proc proc /proc
mount -t sysfs sysfs /sys

echo "Mounted core filesystems"

/bin/busybox --install /bin

setup_sdcard_access() {
	mkdir -p /sdcard
	mount -t vfat /dev/mmcblk0p1 /sdcard -o rw,umask=0000,dmask=0000
	sleep 1
	echo "Mount /sdcard successful"
}

# Determine if sdcard access needs to be setup
# On WyzeCam Pan units the /dev/mmcblk0p1 is available without having
# to export pin 43. However on WyzeCams you need to export 43
# for the mmc devices to show up

if [ -e /dev/mmcblk0p1 ]; then
	setup_sdcard_access
else
	# If the device doesn't exist then either the sdcard is not present or we need to export the pin
	echo 43 > /sys/class/gpio/export
	echo out > /sys/class/gpio/gpio43/direction
	sleep 3

	# If after exporting the device exists then setup
	if [ -e /dev/mmcblk0p1 ]; then
		setup_sdcard_access
	else
		# If it still doesn't exist then unexport and continue
		echo 43 > /sys/class/gpio/unexport 
	fi;
fi;

# About the earliest we can read configuration parameters
YACAM_CONFIG_FILE=/sdcard/yacam.conf
if [[ -f $YACAM_CONFIG_FILE ]]; then
	. $YACAM_CONFIG_FILE
fi

if [[ "$ENABLE_DEBUG" == "1" ]]; then
	echo "Enabling kernel initramfs debug log to sdcard"
	LOG_FILE="/sdcard/initramfs_output.log"
	rm -f $LOG_FILE && touch $LOG_FILE

	mknod /root/stdout_and_stderr.pipe p
	cat /root/stdout_and_stderr.pipe | tee $LOG_FILE &
	exec 1>/root/stdout_and_stderr.pipe
	exec 2>/root/stdout_and_stderr.pipe
fi

# Checks for a file and if present writes a new bootloader
upgrade_bootloader() {
	UPGRADE_BOOTLOADER_FILE=/sdcard/DO_BOOTLOADER_UPGRADE
	UBOOT_FILE=/sdcard/u-boot-lzo-with-spl.bin

	if [[ -f "$UPGRADE_BOOTLOADER_FILE" && -f "$UBOOT_FILE" ]]; then
		echo "Upgrading bootloader using file: $UBOOT_FILE"

		# Do a blue heartbeat while upgrading bootloader
		echo "none" > /sys/class/leds/led_blue/trigger
		echo "none" > /sys/class/leds/led_yellow/trigger
		echo "heartbeat" > /sys/class/leds/led_blue/trigger

		# Backup old bootloader
		dd if=/dev/mtdblock0 of="/sdcard/uboot_backup.bin"

		# Erase the bootloader
		/bin/flash_eraseall /dev/mtd0

		# Flash new bootloader
		dd if=$UBOOT_FILE of=/dev/mtdblock0

		# Remove the file to indicate we've done the upgrade
		rm "/sdcard/$UPGRADE_BOOTLOADER_FILE"

		# Set leds back to yellow blink
		echo "none" > /sys/class/leds/led_blue/trigger
		echo "timer" > /sys/class/leds/led_yellow/trigger
	fi;
}
upgrade_bootloader

wipe_rootfs_mtd_partition() {
	if [[ "$WIPE_ROOTFS" == "1" ]]; then
		echo "Wiping /dev/mtd2 (rootfs partition)"
		# Do a blue heartbeat
		echo "none" > /sys/class/leds/led_blue/trigger
		echo "none" > /sys/class/leds/led_yellow/trigger
		echo "heartbeat" > /sys/class/leds/led_blue/trigger

		umount /jffsroot
		/bin/flash_eraseall /dev/mtd2

		# Set leds back to yellow blink
		echo "none" > /sys/class/leds/led_blue/trigger
		echo "timer" > /sys/class/leds/led_yellow/trigger

		echo "Wipe complete. Remove WIPE_ROOTFS flag and reflash the camera."
	fi
}
wipe_rootfs_mtd_partition

#unmount sdcard if mounted
if [ -e /dev/mmcblk0p1 ]; then
  umount /sdcard
fi

rm -r /sdcard

echo "Mounting real root filesystem...."

mkdir /rom
mount -t squashfs /dev/mtdblock2 /rom
mkdir /config
mount -t jffs2 /dev/mtdblock3 /config
mkdir -p /config/overlay
mkdir /newroot
mount -t overlayfs -o lowerdir=/rom,upperdir=/config/overlay overlayfs /newroot

mount --move /dev /newroot/dev
mount --move /sys /newroot/sys
mount --move /config /newroot/config
mount --move /proc /newroot/proc

echo "Switching root to /newroot"

# Switch back to normal logging
exec 1>/dev/console
exec 2>/dev/console

# switch_root moves already mounted /proc, /dev, /sys and /run to newroot
exec busybox switch_root /newroot /sbin/init
